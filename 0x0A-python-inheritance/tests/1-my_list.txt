===========================
Test cases for 1-my_list.py
===========================

Class MyList inherits from list

- Public instance method: def print_sorted(self): that prints the list, but sorted (ascending sort)
- You can assume that all the elements of the list will be of type int

Import module:

    >>> MyList = __import__('1-my_list').MyList


Documentation
=============

Checking for documentation:

    >>> module_doc = __import__("1-my_list").__doc__
    >>> print(len(module_doc) > 0)
    True

    >>> class_doc = __import__("1-my_list").MyList.__doc__
    >>> print(len(class_doc) > 0)
    True

    >>> method_doc = __import__("1-my_list").MyList.print_sorted.__doc__
    >>> print(len(method_doc) > 0)
    True


Class Testing
=============

Function 'print_sorted' prints the list, but sorted (ascending sort)

Object of type list
--------------------
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>

>>> isinstance(my_list, list)
True

append() test
-----------------
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]

pop() test
-------------
>>> my_list.pop(-1)
4
>>> print(my_list)
[1, 2, 3, 5]

sorted test
------------------------------
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]

negative numbers edge case
------------------------------
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(-6)
>>> my_list.append(5)
>>> my_list.append(-4)
>>> print(my_list)
[1, 2, -6, 5, -4]
>>> my_list.print_sorted()
[-6, -4, 1, 2, 5]
>>> print(my_list)
[1, 2, -6, 5, -4]